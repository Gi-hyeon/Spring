package kr.or.ddit.aop;

import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

// @Component 는 스프링 빈으로 등록하기 위한 어노테이션	-> 서버가 런타임될 때 빼놓지말고 나 챙겨가 이런 뜻
// @Aspect는 어노테이션을 붙여 이 클래스가 Aspoect를 나타내는 클래스라는 걸 명시
// AOPController 클래스 빈 등록 시, aOPController로 할지 aoPController로 할지가 명확하지 않을 수 있어서 aopController 라는 걸 명시
@Component("aopController")
@Aspect
public class AOPController {
	/*
	 * 14장 AOP
	 * 
	 * 1. AOP 설명
	 * 
	 * 		[AOP란? 예시]
	 * 		406호 반장 정수학생이 신입으로 프로젝트를 진행하고 있다.
	 * 		그러던 어느날, 성의 팀장님을 통해 '반장님, 지금 개발중인 서비스 처리 속도좀 로그로 남겨주세요!'라는 부탁을 받는다.
	 * 		반장 정수학생은 부탁받은 요구사항을 이행하기 위해서 본인이 만들고 있는 서비스 로직에서 처리 속도를 찍어볼 메서드를 개발해 처리 속도가 잘 찍히는 걸 확인한다.
	 * 		기분이 좋은 정수학생은 팀장님께로 달려간다.	'팀장님! 기능 작업 완료했씁니다!'라고 컨펌을 받는다.
	 * 		성희팀장은 아주 긍정적인 검토안을 정수학생한테 전달하면서 우리 서비스 전체에도 각 처리속도를 찍어주세요 라고 부탁한다
	 * 		정수학생은 본인이 만들어 낸 메서드를 각 기능별 서비스 로직에 하나하나씩 약 2만개쯤 넣을쯤에 의문을 갖는다.
	 * 
	 * 
	 * 			'서비스 로직에서 제일 중요한 로직은 본래의 기능이 제일 중요하고 지금 내가 작성하는 로직은 옵션(부각 기능)이 추가되는 게 아닐려나?'
	 * 			'그럼 이걸 하나의 묶음으로는 처리가 불가능한건가?'
	 * 
	 * 		라는 생각을 하게된다. 그렇게 정수학생은 위와같은 고민을 해결하기 위해서 구글링을 시작한다.
	 * 
	 * 		여기서, 시간을 측정하고 권한을 체크하는 등의 기능은 옵션과 같은 부가기능을 일종의 인프라 로직이라고 하는데, 이 인프라 로직은 애플리케이션 전 영역에서
	 * 		나타날 수 있고, 중보코드를 만들어 내 개발의 효율성을 저하시키고 유지보수가 힘들어 질 수 있다.
	 * 	
	 * 		이러한 인프라 로직은 아래처럼 하나의 관심사를 가질 수 있는데, 이런 관심사들의 중복이 횡단으로 나타나는데, 이것으 가르켜 '횡단 관심사(Cross-cutting Concern)'라고 함
	 * 	
	 * 			┌─────────────────────────────────────────────────────────────────┐
	 * 			│	[처리속도측정]		[시간속도측정]		[처리속도측정]		[처리속도측정]	  │
	 * 			└─────────────────────────────────────────────────────────────────┘
	 * 				[비즈니스로직]		[비즈니스로직]		[비즈니스로직]		[비즈니스로직]
	 * 			    [처리내용로깅]		[처리내용로깅]		[처리내용로깅]		[처리내용로깅]
	 * 			───────────────────────────────────────────────────────────────────
	 * 				   로그인 기능		  회원가입 기능		   게시판 목록		   게시판 등록		....
	 * 
	 * 			이런 횡단 관심사를 통해서 프로그래밍하는 것이 AOP라고한다.
	 * 
	 * 			** 간단한게 맛보기
	 * 			- Aspect(어스펙트) : AOP의 단위가 되는 횡단 관심사
	 * 			- 횡단 관심사(Cross-cutting Concern) : 핵심(Core) 비즈니스 로직(메서드 실행 시작 시간 출력, 메서드 처리 후 시간 출력 등)과 다소 거리가 있지만,
	 * 											      여러 모듈에서 공통적이고 반복적친 처리를 요구하는 내용(메서드 실행 시작 시간 출력 등)
	 * 			- 횡단 관심사 분리(Separation of Cross-cutting Concern) : 횡단 관심사에서 해당하는 부분(메서드 실행 시작 시간 출력, 메서드 처리 후 시간 출력 등)을
	 * 																  분리해서 한 곳으로 모으는 것을 의미
	 * 			- @Componet : @Aspect와 짝꿍, component-scan시 '저 여기있어요~ 여기 봐주세요~'라는 의미
	 * 			- JoinPoint : 어드바이스(부가기능)가 적용될 수 있는 위치
	 * 			- Advice : 어떤 부가기능(메서드 실행 시작 전, 메서드 실행 후 등)을 언제(삼겹살 굽기 전, 삼겹살을 다 먹은 후 등)사용할 지 정의
	 * 				* 언제?
	 * 				> Before : 조인포인트 전에 실행.(살겹살을 굽기 전에)
	 * 				> After : 조인 포인트에서 처리가 완료된 후 실행.(삽겹살을 굽고 먹은 후 실행)
	 * 				> After Returning : 조인 포인트가 정상적으로 종료 후 실행
	 * 				> After Throwing : 조인 포인트에서 예외 발생 시 실행. 예외가 발생안되면 실행 안함
	 * 				> Around : 조인 포인트 전후에 실행(삼겹살을 굽기 전과 먹은 후 실행)
	 * 
	 * 
	 * 
	 */
}




























